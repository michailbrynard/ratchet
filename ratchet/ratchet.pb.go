// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ratchet.proto

/*
Package ratchet is a generated protocol buffer package.

It is generated from these files:
	ratchet.proto

It has these top-level messages:
	CreateTransactionRequest
	ListTransactionsRequest
	GetTransactionRequest
	UpdateTransactionRequest
	Transaction
*/
package ratchet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateTransactionRequest struct {
}

func (m *CreateTransactionRequest) Reset()                    { *m = CreateTransactionRequest{} }
func (m *CreateTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTransactionRequest) ProtoMessage()               {}
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListTransactionsRequest struct {
}

func (m *ListTransactionsRequest) Reset()                    { *m = ListTransactionsRequest{} }
func (m *ListTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTransactionsRequest) ProtoMessage()               {}
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetTransactionRequest struct {
}

func (m *GetTransactionRequest) Reset()                    { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()               {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UpdateTransactionRequest struct {
}

func (m *UpdateTransactionRequest) Reset()                    { *m = UpdateTransactionRequest{} }
func (m *UpdateTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTransactionRequest) ProtoMessage()               {}
func (*UpdateTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Transaction struct {
	Type   string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Transaction) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Transaction) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateTransactionRequest)(nil), "ratchet.CreateTransactionRequest")
	proto.RegisterType((*ListTransactionsRequest)(nil), "ratchet.ListTransactionsRequest")
	proto.RegisterType((*GetTransactionRequest)(nil), "ratchet.GetTransactionRequest")
	proto.RegisterType((*UpdateTransactionRequest)(nil), "ratchet.UpdateTransactionRequest")
	proto.RegisterType((*Transaction)(nil), "ratchet.Transaction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ratchet service

type RatchetClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (Ratchet_ListTransactionsClient, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type ratchetClient struct {
	cc *grpc.ClientConn
}

func NewRatchetClient(cc *grpc.ClientConn) RatchetClient {
	return &ratchetClient{cc}
}

func (c *ratchetClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/ratchet.Ratchet/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratchetClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (Ratchet_ListTransactionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ratchet_serviceDesc.Streams[0], c.cc, "/ratchet.Ratchet/ListTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &ratchetListTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ratchet_ListTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type ratchetListTransactionsClient struct {
	grpc.ClientStream
}

func (x *ratchetListTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ratchetClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/ratchet.Ratchet/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratchetClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/ratchet.Ratchet/UpdateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ratchet service

type RatchetServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*Transaction, error)
	ListTransactions(*ListTransactionsRequest, Ratchet_ListTransactionsServer) error
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*Transaction, error)
}

func RegisterRatchetServer(s *grpc.Server, srv RatchetServer) {
	s.RegisterService(&_Ratchet_serviceDesc, srv)
}

func _Ratchet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatchetServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratchet.Ratchet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatchetServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ratchet_ListTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RatchetServer).ListTransactions(m, &ratchetListTransactionsServer{stream})
}

type Ratchet_ListTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type ratchetListTransactionsServer struct {
	grpc.ServerStream
}

func (x *ratchetListTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func _Ratchet_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatchetServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratchet.Ratchet/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatchetServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ratchet_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatchetServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ratchet.Ratchet/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatchetServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ratchet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ratchet.Ratchet",
	HandlerType: (*RatchetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _Ratchet_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Ratchet_GetTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _Ratchet_UpdateTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTransactions",
			Handler:       _Ratchet_ListTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ratchet.proto",
}

func init() { proto.RegisterFile("ratchet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4a, 0x2c, 0x49,
	0xce, 0x48, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xa4, 0xb8,
	0x24, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x43, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93, 0x4b, 0x32,
	0xf3, 0xf3, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x94, 0x24, 0xb9, 0xc4, 0x7d, 0x32, 0x8b,
	0x4b, 0x90, 0x64, 0x8a, 0x61, 0x52, 0xe2, 0x5c, 0xa2, 0xee, 0xa9, 0x25, 0x58, 0xf4, 0x48, 0x71,
	0x49, 0x84, 0x16, 0xa4, 0x60, 0x37, 0xcf, 0x92, 0x8b, 0x1b, 0x49, 0x54, 0x48, 0x88, 0x8b, 0xa5,
	0xa4, 0xb2, 0x20, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16, 0x12, 0xe3, 0x62,
	0x4b, 0xcc, 0xcd, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0xf2, 0x8c,
	0x0e, 0x33, 0x71, 0xb1, 0x07, 0x41, 0x9c, 0x2c, 0xe4, 0xc7, 0x25, 0x88, 0xe1, 0x64, 0x21, 0x45,
	0x3d, 0x98, 0x07, 0x71, 0x79, 0x47, 0x4a, 0x04, 0xae, 0x04, 0x49, 0x52, 0x89, 0x41, 0xc8, 0x8f,
	0x4b, 0x00, 0xdd, 0x9b, 0x42, 0x0a, 0x70, 0xb5, 0x38, 0x42, 0x00, 0x97, 0x69, 0x06, 0x8c, 0x42,
	0x1e, 0x5c, 0x7c, 0xa8, 0x61, 0x23, 0x24, 0x07, 0x57, 0x8b, 0x35, 0xd0, 0xf0, 0xb8, 0x4c, 0x10,
	0x23, 0x30, 0x91, 0x7c, 0x8a, 0x2b, 0xa0, 0x71, 0x99, 0xe7, 0xa4, 0xc5, 0x25, 0x91, 0x9f, 0x92,
	0x99, 0x57, 0x5c, 0x90, 0x93, 0x58, 0x9c, 0x9b, 0x58, 0x94, 0x99, 0x96, 0x93, 0x0a, 0x53, 0xe9,
	0xc4, 0x03, 0x0d, 0xde, 0x00, 0x50, 0xfa, 0x08, 0x60, 0x4c, 0x62, 0x03, 0x27, 0x14, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x6c, 0x2d, 0x00, 0x39, 0x02, 0x00, 0x00,
}
